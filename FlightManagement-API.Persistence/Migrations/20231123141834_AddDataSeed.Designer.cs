// <auto-generated />
using System;
using FlightManagement_API.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightManagement_API.Persistence.Migrations
{
    [DbContext(typeof(FlightDbContext))]
    [Migration("20231123141834_AddDataSeed")]
    partial class AddDataSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Aircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessClassSeats")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EconomyClassSeats")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("LastMaintenanceDate")
                        .HasColumnType("date");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Range")
                        .HasColumnType("float");

                    b.Property<int>("SeatCapacity")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("YearOfManufacture")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Aircrafts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessClassSeats = 0,
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5429),
                            CreatedBy = "admin",
                            EconomyClassSeats = 0,
                            InactivatedBy = "",
                            LastMaintenanceDate = new DateOnly(1, 1, 1),
                            Manufacturer = "Boeing",
                            Model = "777",
                            ModifiedBy = "",
                            Range = 0.0,
                            SeatCapacity = 300,
                            StatusId = 1,
                            YearOfManufacture = new DateOnly(1, 1, 1)
                        },
                        new
                        {
                            Id = 2,
                            BusinessClassSeats = 0,
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5437),
                            CreatedBy = "admin",
                            EconomyClassSeats = 0,
                            InactivatedBy = "",
                            LastMaintenanceDate = new DateOnly(1, 1, 1),
                            Manufacturer = "Airbus",
                            Model = "A380",
                            ModifiedBy = "",
                            Range = 0.0,
                            SeatCapacity = 500,
                            StatusId = 1,
                            YearOfManufacture = new DateOnly(1, 1, 1)
                        });
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Airline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Airlines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(4862),
                            CreatedBy = "admin",
                            InactivatedBy = "",
                            LogoUrl = "url_to_logo_american",
                            ModifiedBy = "",
                            Name = "American Airlines",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(4953),
                            CreatedBy = "admin",
                            InactivatedBy = "",
                            LogoUrl = "url_to_logo_lufthansa",
                            ModifiedBy = "",
                            Name = "Lufthansa",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IataCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5207),
                            CreatedBy = "admin",
                            IataCode = "LAX",
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Name = "Los Angeles International Airport",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5212),
                            CreatedBy = "admin",
                            IataCode = "FRA",
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Name = "Frankfurt Airport",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AircraftId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AircraftId = 1,
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5735),
                            CreatedBy = "admin",
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Name = "Wi-Fi",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            AircraftId = 1,
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5738),
                            CreatedBy = "admin",
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Name = "Extra Legroom",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassengerId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("PassengerId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5706),
                            CreatedBy = "admin",
                            FlightId = 1,
                            InactivatedBy = "",
                            ModifiedBy = "",
                            PassengerId = 1,
                            Price = 500.0,
                            ReservationDate = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5701),
                            Status = "Confirmed",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5712),
                            CreatedBy = "admin",
                            FlightId = 2,
                            InactivatedBy = "",
                            ModifiedBy = "",
                            PassengerId = 2,
                            Price = 750.0,
                            ReservationDate = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5710),
                            Status = "Confirmed",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AircraftId")
                        .HasColumnType("int");

                    b.Property<int>("AirlineId")
                        .HasColumnType("int");

                    b.Property<int>("ArrivalAirportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartureAirportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.HasIndex("AirlineId");

                    b.HasIndex("ArrivalAirportId");

                    b.HasIndex("DepartureAirportId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AircraftId = 1,
                            AirlineId = 1,
                            ArrivalAirportId = 2,
                            ArrivalTime = new DateTime(2023, 11, 24, 2, 18, 34, 13, DateTimeKind.Local).AddTicks(5469),
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5471),
                            CreatedBy = "admin",
                            DepartureAirportId = 1,
                            DepartureTime = new DateTime(2023, 11, 23, 18, 18, 34, 13, DateTimeKind.Local).AddTicks(5466),
                            FlightNumber = "AA100",
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Status = "Active",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            AircraftId = 2,
                            AirlineId = 2,
                            ArrivalAirportId = 1,
                            ArrivalTime = new DateTime(2023, 11, 24, 11, 18, 34, 13, DateTimeKind.Local).AddTicks(5477),
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5479),
                            CreatedBy = "admin",
                            DepartureAirportId = 2,
                            DepartureTime = new DateTime(2023, 11, 24, 3, 18, 34, 13, DateTimeKind.Local).AddTicks(5475),
                            FlightNumber = "LH205",
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Status = "Active",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.FlightDetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("Aerobridge")
                        .HasColumnType("bit");

                    b.Property<string>("BaggageCarousel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CheckInCounter")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FlightDistance")
                        .HasColumnType("float");

                    b.Property<string>("Gate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Terminal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FlightDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Aerobridge = true,
                            BaggageCarousel = "Carousel 5",
                            BoardingStatus = "On Time",
                            CheckInCounter = 22,
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5510),
                            CreatedBy = "admin",
                            FlightDistance = 2500.0,
                            Gate = "G5",
                            GateTime = new DateTime(2023, 11, 23, 17, 48, 34, 13, DateTimeKind.Local).AddTicks(5507),
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Stand = "Stand 3A",
                            StatusId = 1,
                            Terminal = "Terminal 1"
                        },
                        new
                        {
                            Id = 2,
                            Aerobridge = false,
                            BaggageCarousel = "Carousel 3",
                            BoardingStatus = "Delayed",
                            CheckInCounter = 18,
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5515),
                            CreatedBy = "admin",
                            FlightDistance = 3200.0,
                            Gate = "G10",
                            GateTime = new DateTime(2023, 11, 24, 2, 48, 34, 13, DateTimeKind.Local).AddTicks(5513),
                            InactivatedBy = "",
                            ModifiedBy = "",
                            Stand = "Stand 4B",
                            StatusId = 1,
                            Terminal = "Terminal 2"
                        });
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Luggage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassengerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.ToTable("Luggages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5766),
                            CreatedBy = "admin",
                            Dimensions = "22x14x9 inches",
                            InactivatedBy = "",
                            ModifiedBy = "",
                            PassengerId = 1,
                            Status = "Checked",
                            StatusId = 1,
                            Type = "Carry-on",
                            Weight = 15.5
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5770),
                            CreatedBy = "admin",
                            Dimensions = "24x16x10 inches",
                            InactivatedBy = "",
                            ModifiedBy = "",
                            PassengerId = 2,
                            Status = "Checked",
                            StatusId = 1,
                            Type = "Checked",
                            Weight = 20.0
                        });
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Passengers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5545),
                            CreatedBy = "admin",
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            InactivatedBy = "",
                            LastName = "Doe",
                            ModifiedBy = "",
                            PhoneNumber = "123456789",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 11, 23, 15, 18, 34, 13, DateTimeKind.Local).AddTicks(5549),
                            CreatedBy = "admin",
                            Email = "janesmith@example.com",
                            FirstName = "Jane",
                            InactivatedBy = "",
                            LastName = "Smith",
                            ModifiedBy = "",
                            PhoneNumber = "987654321",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Airport", b =>
                {
                    b.OwnsOne("FlightManagement_API.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("AirportId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Country");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .IsUnicode(false)
                                .HasColumnType("varchar(10)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("AirportId");

                            b1.ToTable("Airports");

                            b1.WithOwner()
                                .HasForeignKey("AirportId");

                            b1.HasData(
                                new
                                {
                                    AirportId = 1,
                                    City = "Los Angeles",
                                    Country = "USA",
                                    State = "CA",
                                    Street = "1 World Way",
                                    ZipCode = "90045"
                                },
                                new
                                {
                                    AirportId = 2,
                                    City = "Frankfurt",
                                    Country = "Germany",
                                    State = "Hesse",
                                    Street = "60547 Frankfurt",
                                    ZipCode = "60547"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Amenity", b =>
                {
                    b.HasOne("FlightManagement_API.Domain.Entities.Aircraft", "Aircraft")
                        .WithMany("Amenities")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Booking", b =>
                {
                    b.HasOne("FlightManagement_API.Domain.Entities.Flight", "Flight")
                        .WithMany("Bookings")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightManagement_API.Domain.Entities.Passenger", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Flight", b =>
                {
                    b.HasOne("FlightManagement_API.Domain.Entities.Aircraft", "Aircraft")
                        .WithMany()
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightManagement_API.Domain.Entities.Airline", "Airline")
                        .WithMany()
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightManagement_API.Domain.Entities.Airport", "ArrivalAirport")
                        .WithMany("ArrivalFlights")
                        .HasForeignKey("ArrivalAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlightManagement_API.Domain.Entities.Airport", "DepartureAirport")
                        .WithMany("DepartureFlights")
                        .HasForeignKey("DepartureAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("Airline");

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.FlightDetail", b =>
                {
                    b.HasOne("FlightManagement_API.Domain.Entities.Flight", "Flight")
                        .WithOne("FlightDetail")
                        .HasForeignKey("FlightManagement_API.Domain.Entities.FlightDetail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Luggage", b =>
                {
                    b.HasOne("FlightManagement_API.Domain.Entities.Passenger", "Passenger")
                        .WithMany("Luggages")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Passenger", b =>
                {
                    b.OwnsOne("FlightManagement_API.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("PassengerId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Country");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .IsUnicode(false)
                                .HasColumnType("varchar(10)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("PassengerId");

                            b1.ToTable("Passengers");

                            b1.WithOwner()
                                .HasForeignKey("PassengerId");

                            b1.HasData(
                                new
                                {
                                    PassengerId = 1,
                                    City = "New York",
                                    Country = "USA",
                                    State = "NY",
                                    Street = "123 Broadway",
                                    ZipCode = "10007"
                                },
                                new
                                {
                                    PassengerId = 2,
                                    City = "Berlin",
                                    Country = "Germany",
                                    State = "Berlin",
                                    Street = "Alexanderplatz 1",
                                    ZipCode = "10178"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Aircraft", b =>
                {
                    b.Navigation("Amenities");
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Airport", b =>
                {
                    b.Navigation("ArrivalFlights");

                    b.Navigation("DepartureFlights");
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Flight", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("FlightDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("FlightManagement_API.Domain.Entities.Passenger", b =>
                {
                    b.Navigation("Luggages");
                });
#pragma warning restore 612, 618
        }
    }
}
